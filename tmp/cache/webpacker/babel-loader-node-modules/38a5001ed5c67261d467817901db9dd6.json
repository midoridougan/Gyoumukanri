{"ast":null,"code":"(function (b) {\n  b.widget(\"ui.tagit\", {\n    options: {\n      allowDuplicates: !1,\n      caseSensitive: !0,\n      fieldName: \"tags\",\n      placeholderText: null,\n      readOnly: !1,\n      removeConfirmation: !1,\n      tagLimit: null,\n      availableTags: [],\n      autocomplete: {},\n      showAutocompleteOnFocus: !1,\n      allowSpaces: !1,\n      singleField: !1,\n      singleFieldDelimiter: \",\",\n      singleFieldNode: null,\n      animate: !0,\n      tabIndex: null,\n      beforeTagAdded: null,\n      afterTagAdded: null,\n      beforeTagRemoved: null,\n      afterTagRemoved: null,\n      onTagClicked: null,\n      onTagLimitExceeded: null,\n      onTagAdded: null,\n      onTagRemoved: null,\n      tagSource: null\n    },\n    _create: function _create() {\n      var a = this;\n      this.element.is(\"input\") ? (this.tagList = b(\"<ul></ul>\").insertAfter(this.element), this.options.singleField = !0, this.options.singleFieldNode = this.element, this.element.addClass(\"tagit-hidden-field\")) : this.tagList = this.element.find(\"ul, ol\").andSelf().last();\n      this.tagInput = b('<input type=\"text\" />').addClass(\"ui-widget-content\");\n      this.options.readOnly && this.tagInput.attr(\"disabled\", \"disabled\");\n      this.options.tabIndex && this.tagInput.attr(\"tabindex\", this.options.tabIndex);\n      this.options.placeholderText && this.tagInput.attr(\"placeholder\", this.options.placeholderText);\n      this.options.autocomplete.source || (this.options.autocomplete.source = function (a, e) {\n        var d = a.term.toLowerCase(),\n            c = b.grep(this.options.availableTags, function (a) {\n          return 0 === a.toLowerCase().indexOf(d);\n        });\n        this.options.allowDuplicates || (c = this._subtractArray(c, this.assignedTags()));\n        e(c);\n      });\n      this.options.showAutocompleteOnFocus && (this.tagInput.focus(function (b, d) {\n        a._showAutocomplete();\n      }), \"undefined\" === typeof this.options.autocomplete.minLength && (this.options.autocomplete.minLength = 0));\n      b.isFunction(this.options.autocomplete.source) && (this.options.autocomplete.source = b.proxy(this.options.autocomplete.source, this));\n      b.isFunction(this.options.tagSource) && (this.options.tagSource = b.proxy(this.options.tagSource, this));\n      this.tagList.addClass(\"tagit\").addClass(\"ui-widget ui-widget-content ui-corner-all\").append(b('<li class=\"tagit-new\"></li>').append(this.tagInput)).click(function (d) {\n        var c = b(d.target);\n        c.hasClass(\"tagit-label\") ? (c = c.closest(\".tagit-choice\"), c.hasClass(\"removed\") || a._trigger(\"onTagClicked\", d, {\n          tag: c,\n          tagLabel: a.tagLabel(c)\n        })) : a.tagInput.focus();\n      });\n      var c = !1;\n      if (this.options.singleField) if (this.options.singleFieldNode) {\n        var d = b(this.options.singleFieldNode),\n            f = d.val().split(this.options.singleFieldDelimiter);\n        d.val(\"\");\n        b.each(f, function (b, d) {\n          a.createTag(d, null, !0);\n          c = !0;\n        });\n      } else this.options.singleFieldNode = b('<input type=\"hidden\" style=\"display:none;\" value=\"\" name=\"' + this.options.fieldName + '\" />'), this.tagList.after(this.options.singleFieldNode);\n      c || this.tagList.children(\"li\").each(function () {\n        b(this).hasClass(\"tagit-new\") || (a.createTag(b(this).text(), b(this).attr(\"class\"), !0), b(this).remove());\n      });\n      this.tagInput.keydown(function (c) {\n        if (c.which == b.ui.keyCode.BACKSPACE && \"\" === a.tagInput.val()) {\n          var d = a._lastTag();\n\n          !a.options.removeConfirmation || d.hasClass(\"remove\") ? a.removeTag(d) : a.options.removeConfirmation && d.addClass(\"remove ui-state-highlight\");\n        } else a.options.removeConfirmation && a._lastTag().removeClass(\"remove ui-state-highlight\");\n\n        if (c.which === b.ui.keyCode.COMMA && !1 === c.shiftKey || c.which === b.ui.keyCode.ENTER || c.which == b.ui.keyCode.TAB && \"\" !== a.tagInput.val() || c.which == b.ui.keyCode.SPACE && !0 !== a.options.allowSpaces && ('\"' != b.trim(a.tagInput.val()).replace(/^s*/, \"\").charAt(0) || '\"' == b.trim(a.tagInput.val()).charAt(0) && '\"' == b.trim(a.tagInput.val()).charAt(b.trim(a.tagInput.val()).length - 1) && 0 !== b.trim(a.tagInput.val()).length - 1)) c.which === b.ui.keyCode.ENTER && \"\" === a.tagInput.val() || c.preventDefault(), a.options.autocomplete.autoFocus && a.tagInput.data(\"autocomplete-open\") || (a.tagInput.autocomplete(\"close\"), a.createTag(a._cleanedInput()));\n      }).blur(function (b) {\n        a.tagInput.data(\"autocomplete-open\") || a.createTag(a._cleanedInput());\n      });\n      if (this.options.availableTags || this.options.tagSource || this.options.autocomplete.source) d = {\n        select: function select(b, c) {\n          a.createTag(c.item.value);\n          return !1;\n        }\n      }, b.extend(d, this.options.autocomplete), d.source = this.options.tagSource || d.source, this.tagInput.autocomplete(d).bind(\"autocompleteopen.tagit\", function (b, c) {\n        a.tagInput.data(\"autocomplete-open\", !0);\n      }).bind(\"autocompleteclose.tagit\", function (b, c) {\n        a.tagInput.data(\"autocomplete-open\", !1);\n      }), this.tagInput.autocomplete(\"widget\").addClass(\"tagit-autocomplete\");\n    },\n    destroy: function destroy() {\n      b.Widget.prototype.destroy.call(this);\n      this.element.unbind(\".tagit\");\n      this.tagList.unbind(\".tagit\");\n      this.tagInput.removeData(\"autocomplete-open\");\n      this.tagList.removeClass(\"tagit ui-widget ui-widget-content ui-corner-all tagit-hidden-field\");\n      this.element.is(\"input\") ? (this.element.removeClass(\"tagit-hidden-field\"), this.tagList.remove()) : (this.element.children(\"li\").each(function () {\n        b(this).hasClass(\"tagit-new\") ? b(this).remove() : (b(this).removeClass(\"tagit-choice ui-widget-content ui-state-default ui-state-highlight ui-corner-all remove tagit-choice-editable tagit-choice-read-only\"), b(this).text(b(this).children(\".tagit-label\").text()));\n      }), this.singleFieldNode && this.singleFieldNode.remove());\n      return this;\n    },\n    _cleanedInput: function _cleanedInput() {\n      return b.trim(this.tagInput.val().replace(/^\"(.*)\"$/, \"$1\"));\n    },\n    _lastTag: function _lastTag() {\n      return this.tagList.find(\".tagit-choice:last:not(.removed)\");\n    },\n    _tags: function _tags() {\n      return this.tagList.find(\".tagit-choice:not(.removed)\");\n    },\n    assignedTags: function assignedTags() {\n      var a = this,\n          c = [];\n      this.options.singleField ? (c = b(this.options.singleFieldNode).val().split(this.options.singleFieldDelimiter), \"\" === c[0] && (c = [])) : this._tags().each(function () {\n        c.push(a.tagLabel(this));\n      });\n      return c;\n    },\n    _updateSingleTagsField: function _updateSingleTagsField(a) {\n      b(this.options.singleFieldNode).val(a.join(this.options.singleFieldDelimiter)).trigger(\"change\");\n    },\n    _subtractArray: function _subtractArray(a, c) {\n      for (var d = [], f = 0; f < a.length; f++) {\n        -1 == b.inArray(a[f], c) && d.push(a[f]);\n      }\n\n      return d;\n    },\n    tagLabel: function tagLabel(a) {\n      return this.options.singleField ? b(a).find(\".tagit-label:first\").text() : b(a).find(\"input:first\").val();\n    },\n    _showAutocomplete: function _showAutocomplete() {\n      this.tagInput.autocomplete(\"search\", \"\");\n    },\n    _findTagByLabel: function _findTagByLabel(a) {\n      var c = this,\n          d = null;\n\n      this._tags().each(function (f) {\n        if (c._formatStr(a) == c._formatStr(c.tagLabel(this))) return d = b(this), !1;\n      });\n\n      return d;\n    },\n    _isNew: function _isNew(a) {\n      return !this._findTagByLabel(a);\n    },\n    _formatStr: function _formatStr(a) {\n      return this.options.caseSensitive ? a : b.trim(a.toLowerCase());\n    },\n    _effectExists: function _effectExists(a) {\n      return Boolean(b.effects && (b.effects[a] || b.effects.effect && b.effects.effect[a]));\n    },\n    createTag: function createTag(a, c, d) {\n      var f = this;\n      a = b.trim(a);\n      this.options.preprocessTag && (a = this.options.preprocessTag(a));\n      if (\"\" === a) return !1;\n      if (!this.options.allowDuplicates && !this._isNew(a)) return a = this._findTagByLabel(a), !1 !== this._trigger(\"onTagExists\", null, {\n        existingTag: a,\n        duringInitialization: d\n      }) && this._effectExists(\"highlight\") && a.effect(\"highlight\"), !1;\n      if (this.options.tagLimit && this._tags().length >= this.options.tagLimit) return this._trigger(\"onTagLimitExceeded\", null, {\n        duringInitialization: d\n      }), !1;\n      var g = b(this.options.onTagClicked ? '<a class=\"tagit-label\"></a>' : '<span class=\"tagit-label\"></span>').text(a),\n          e = b(\"<li></li>\").addClass(\"tagit-choice ui-widget-content ui-state-default ui-corner-all\").addClass(c).append(g);\n      this.options.readOnly ? e.addClass(\"tagit-choice-read-only\") : (e.addClass(\"tagit-choice-editable\"), c = b(\"<span></span>\").addClass(\"ui-icon ui-icon-close\"), c = b(\"<a><span class=\\\"text-icon\\\">\\xD7</span></a>\").addClass(\"tagit-close\").append(c).click(function (a) {\n        f.removeTag(e);\n      }), e.append(c));\n      this.options.singleField || (g = g.html(), e.append('<input type=\"hidden\" value=\"' + g + '\" name=\"' + this.options.fieldName + '\" class=\"tagit-hidden-field\" />'));\n      !1 !== this._trigger(\"beforeTagAdded\", null, {\n        tag: e,\n        tagLabel: this.tagLabel(e),\n        duringInitialization: d\n      }) && (this.options.singleField && (g = this.assignedTags(), g.push(a), this._updateSingleTagsField(g)), this._trigger(\"onTagAdded\", null, e), this.tagInput.val(\"\"), this.tagInput.parent().before(e), this._trigger(\"afterTagAdded\", null, {\n        tag: e,\n        tagLabel: this.tagLabel(e),\n        duringInitialization: d\n      }), this.options.showAutocompleteOnFocus && !d && setTimeout(function () {\n        f._showAutocomplete();\n      }, 0));\n    },\n    removeTag: function removeTag(a, c) {\n      c = \"undefined\" === typeof c ? this.options.animate : c;\n      a = b(a);\n\n      this._trigger(\"onTagRemoved\", null, a);\n\n      if (!1 !== this._trigger(\"beforeTagRemoved\", null, {\n        tag: a,\n        tagLabel: this.tagLabel(a)\n      })) {\n        if (this.options.singleField) {\n          var d = this.assignedTags(),\n              f = this.tagLabel(a),\n              d = b.grep(d, function (a) {\n            return a != f;\n          });\n\n          this._updateSingleTagsField(d);\n        }\n\n        if (c) {\n          a.addClass(\"removed\");\n          var d = this._effectExists(\"blind\") ? [\"blind\", {\n            direction: \"horizontal\"\n          }, \"fast\"] : [\"fast\"],\n              g = this;\n          d.push(function () {\n            a.remove();\n\n            g._trigger(\"afterTagRemoved\", null, {\n              tag: a,\n              tagLabel: g.tagLabel(a)\n            });\n          });\n          a.fadeOut(\"fast\").hide.apply(a, d).dequeue();\n        } else a.remove(), this._trigger(\"afterTagRemoved\", null, {\n          tag: a,\n          tagLabel: this.tagLabel(a)\n        });\n      }\n    },\n    removeTagByLabel: function removeTagByLabel(a, b) {\n      var d = this._findTagByLabel(a);\n\n      if (!d) throw \"No such tag exists with the name '\" + a + \"'\";\n      this.removeTag(d, b);\n    },\n    removeAll: function removeAll() {\n      var a = this;\n\n      this._tags().each(function (b, d) {\n        a.removeTag(d, !1);\n      });\n    }\n  });\n})(jQuery);","map":null,"metadata":{},"sourceType":"module"}